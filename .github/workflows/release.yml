name: Release

permissions:
  contents: write

on:
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            ext: ""
            runner: ubuntu-latest
            artifact: discord-nvim-daemon-linux-amd64
          - os: linux
            arch: arm64
            ext: ""
            runner: ubuntu-latest
            artifact: discord-nvim-daemon-linux-arm64
          - os: darwin
            arch: amd64
            ext: ""
            runner: macos-latest
            artifact: discord-nvim-daemon-darwin-amd64
          - os: darwin
            arch: arm64
            ext: ""
            runner: macos-latest
            artifact: discord-nvim-daemon-darwin-arm64
          - os: 
            arch: amd64
            ext: ".exe"
            runner: windows-latest
            artifact: discord-nvim-daemon-windows-amd64.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p bin
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build -ldflags="-s -w" -o bin/${{ matrix.artifact }} ./cmd/discord-nvim-daemon

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir bin
          $env:GOOS="${{ matrix.os }}"
          $env:GOARCH="${{ matrix.arch }}"
          $env:CGO_ENABLED="0"
          go build -ldflags="-s -w" -o "bin\${{ matrix.artifact }}" ./cmd/discord-nvim-daemon

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: bin/${{ matrix.artifact }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          for artifact_dir in artifacts/*; do
            [ -d "$artifact_dir" ] || continue
            for artifact in "$artifact_dir"/*; do
              filename=$(basename "$artifact_dir")
              cp "$artifact" "release/$filename"
              sha256sum "$artifact" > "release/$filename.sha256"
            done
          done
          ls -lh release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}